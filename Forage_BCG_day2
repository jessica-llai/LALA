import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import _logistic
import seaborn as sns
import os
import datetime
import pickle

# read data
price = pd.read_csv('/Users/lym/Downloads/price_data.csv')
client = pd.read_csv('/Users/lym/Downloads/client_data.csv')
print('price: ', price.head(), 'client: ', client.head())

# this is to show datatype in a dictionary
print(pd.DataFrame({"data type": price.dtypes}))
print(pd.DataFrame({"data type": client.dtypes}))
print(client.describe(), client.describe())

# missing data
print(pd.DataFrame({'missing values(%': client.isnull().sum()/len(client.index)*100}))
print(pd.DataFrame({'missing values(%': price.isnull().sum()/len(price.index)*100}))

# visualise data
# churn
# can call multiple variables within one list
churn = client[['id','churn']]
print(churn)
churn.columns = ['companies', 'churn']
print(churn.columns)

# this is to count the churn
count = 0
print('before', count)
for i in client['churn']:
    if i == 1:
        count += 1
print('total churn: ', count)
print('churn rate: ', count/14606)



def plot_stacked_bars(dataframe, title_, size_=(18, 10), rot_=0, legend_='upper right'):
    ax = dataframe.plot(kind='bar',
                        stacked=True,
                        figsize=size_,
                        rot=rot_,
                        title='title_')
    #annotate bars
    annotate_stacked_bars(ax, textsize=14)

    plt.legend(['retention','churn'], loc=legend_)
    plt.ylabel('company base(%')
    plt.show()

def annotate_stacked_bars(ax, pad=0.99, color='white', textsize=13):
    for p in ax.patches:
        value = str(round(p.get_height(),1))
        if value == '0.0':
            continue
    ax.annotate(value,
                ((p.get_x()+ p.get_width()/2)*pad-0.05, (p.get_y()+p.get_height()/2)*pad),

                size = textsize,
                )

churn_total = churn.groupby(client['churn']).count()
churn_percentage = churn_total/churn_total.sum()*100

plot_stacked_bars(churn_percentage.transpose(), 'churning status', (5, 5), legend_='upper right')

# sales channel
channel = client[['id', 'channel_sales', 'churn']]
print(channel)
channel = channel.groupby([channel['channel_sales'], channel['churn']])['id'].count().unstack(level= 1).fillna(0)
channel_churn = (channel.div(channel.sum(axis=1), axis=0)*100).sort_values(by=[1], ascending=False)
print(channel_churn)
plot_stacked_bars(channel_churn, 'sales channel')

# power or energy
contract = client[['id', 'has_gas', 'churn']]
contract = contract.groupby([contract['churn'], contract['has_gas']]).count().unstack(level=0)
contract_percentage = (contract.div(contract.sum(axis=1), axis=0)*100).sort_values(by=[1], ascending=False)
plot_stacked_bars(contract_percentage, 'contract type (with gas)')


